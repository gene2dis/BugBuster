profiles {
	local_docker {
		singularity.enabled = false
		docker.enabled = true
		docker.runOptions = '-u $(id -u):$(id -g)'
	}

	slurm_singularity {
		process.executor = 'slurm'
		singularity.enabled = true
		singularity.autoMounts = true
		docker.enabled = false
	}
}

// NUMERO MAXIMO DE CPUS

executor.cpus = 20

params {

	// PIPELINE EXECUTION OPTIONS

    // FILTERING OPTIONS: [true, false]
 
    quality_control = true

    // ASSEMBLY AVAIBLE OPTIONS: ["coassembly", "assembly", "none"]

    assembly_mode = "assembly"

    // TAXONOMIC PROFILER OPTIONS: ["kraken2", "sourmash", "none"]

    taxonomic_profiler = "none"

    // BOOLEAN OPTIONS FOR EXTRA PROCESS: "true, false"

    help = false
    read_arg_prediction = false
    contig_level_metacerberus = false
    contig_tax_and_arg = true
    include_binning = true
    arg_bin_clustering = false

    // FILTRO DE MINIMA CANTIDAD DE LECTURAS POR MUESTRA

    min_read_sample = 0


    // AUTOMATIC DOWNLOAD DB

    phiX_index = 'phiX174'
    host_db = 'human'
    kraken2_db = 'standard-8'
    karga_db = 'megares'
    kargva_db = 'kargva'
    sourmash_db = 'gtdb_220_k31'
    blast_db = 'nt'
    taxdump_files = 'ncbi'
    checkm2_db = 'v3'
    gtdbtk_db = 'release_220'

    // CUSTOM DATABASES

    custom_phiX_index = ''
    custom_bowtie_host_index = ''
    custom_kraken_db = ''
    custom_karga_db = ''
    custom_kargva_db = ''
    custom_sourmash_db = ''			// Needs to be a vector like ["kmer_file","lineages_file"]
    custom_blast_db = ''
    custom_taxdump_files = ''
    custom_deeparg_db = ''
    custom_checkm2_db = ''
    custom_gtdbtk_db = ''

	// SOFTWARE OPTIONS

    // FASTP

    fastp_n_base_limit = 5 
    fastp_unqualified_percent_limit = 10 
    fastp_qualified_quality_phred = 20 
    fastp_cut_front_window_size = 4 
    fastp_cut_front_mean_quality = 20 
    fastp_cut_right_window_size = 4 
    fastp_cut_right_mean_quality = 20 

	// KRAKEN

    kraken_confidence = 0.1 
    kraken_db_used = "gtdb_release207"

	// BRACKEN

    bracken_read_len = 150
    bracken_tax_level = "S"
 
        // SOURMASH, TAX_RANK OPTIONS ["genus","species","strain"]

        // FOR STRAIN RANK ADD TAXFILE WITH STRAIN COLUMN

    sourmash_db_name = "gtdb_release_220"
    sourmash_tax_rank = "species"

	// BOWTIE

    bowtie_ma = 2 
    bowtie_mp = '6,2' 
    bowtie_score_min = 'G,15,6' 
    bowtie_k = 1 
    bowtie_N = 1 
    bowtie_L = 20 
    bowtie_R = 2 
    bowtie_i = 'S,1,0.75'

	// BBMAP

    bbmap_lenght = 1000

	// METABAT2

    metabat_minContig = 2500
    metabat_maxP = 95
    metabat_minS = 60
    metabat_maxEdges = 200
    metabat_pTNF = 0
    metabat_minCV = 1
    metabat_minCVSum = 1
    metabat_minClsSize = 200000

	// METAWRAP

    metawrap_completeness = 50 
    metawrap_contamination = 10

	// MMSEQS2

    mmseqs_start_sens = 2
    mmseqs_s = 7 
    mmseqs_sens_steps = 3
    mmseqs_min_seq_id = 0.8
    mmseqs_c = 0.7
    mmseqs_cov_mode = 2
    mmseqs_e = 1e-20
    mmseqs_format_mode = 4 
    mmseqs_alignment_mode = 3
    mmseqs_max_seqs = 10000
    mmseqs_format_output = "empty,query,target,evalue,pident,qcov,tcov,tseq"

        // DEEPARG

    deeparg_min_prob = 0.8
    deeparg_arg_alignment_identity = 50
    deeparg_arg_alignment_evalue = "1e-10"
    deeparg_arg_alignment_overlap = 0.8
    deeparg_arg_num_alignments_per_entry = 1000
    deeparg_model_version = 'v2'

	// METACERBERUS
        // HMM OPTIONS [KOFam_all, KOFam_eukaryote, KOFam_prokaryote, COG, VOG, PHROG, CAZy]

    metacerberus_hmm = '"KOFam_all, COG, VOG, PHROG, CAZy"'
    metacerberus_minscore = 25
    metacerberus_evalue = 1e-09

	// SEMIBIN 
        // MODELS = [human_gut, dog_gut, ocean, soil, cat_gut, human_oral, mouse_gut, pig_gut, built_environment, wastewater, chicken_caecum, global]

    semibin_env_model = "human_gut" 

}

// def useSlurm = executor.name == 'slurm'
// def myClusterOptions = useSlurm ? '--constraint=defq' : ''

process {

    withLabel:process_download {
//      clusterOptions = { --constraint=debug-cpu}
        cpus   = { 1 }
        errorStrategy = { 'finish' }
        containerOptions = { '--cpus 1' }
        maxRetries = { 1 }
        beforeScript = { 'chmod g+w .' }
    }

    withLabel:process_single {
//	clusterOptions = { --constraint=tiny}
        cpus   = { 1 }
        errorStrategy = { 'finish' }
        containerOptions = { '--cpus 1' }
        maxRetries = { 2 }
        beforeScript = { 'chmod g+w .' }
    }

    withLabel:process_low {
//      clusterOptions = { --constraint=short}
        cpus   = { 4 }
        errorStrategy = { 'finish' }
        containerOptions = { '--cpus 4' }
        maxRetries = { 2 }
        beforeScript = { 'chmod g+w .' }
    }

    withLabel:process_medium {
//      clusterOptions = { --constaint=defq}
        cpus   = { 6 }
        errorStrategy = { 'finish' }
        containerOptions = { '--cpus 6' }
        maxRetries = { 3 }
        beforeScript = { 'chmod g+w .' }
    }

    withLabel:process_high {
//      clusterOptions = { --constraint=highMem}
        cpus   = { 10 }
        errorStrategy = { 'retry' }
        containerOptions = { '--cpus 10' }
        maxRetries = { 3 }
        beforeScript = { 'chmod g+w .' }
    }
}

includeConfig 'config/databases.config'
includeConfig 'config/modules.config'
